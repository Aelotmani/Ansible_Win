---
- name: Check if BuildTools installed version is compatible with VS Solution
  win_shell: | 
    Function VisualStudio-Solution([string]$Solution){
      $l = Get-Content $Solution
          if($l -match '^VisualStudioVersion'){
              $l=$l.replace(' ','')
              ([regex]"(\b[0-9]{1,2})").Match(([regex]"(\bVisualStudioVersion=[0-9]{1,2})").Match($l).Value).value
          }else{ return 0 }
    }
    Function Check-MSBuild([int] $MSBuildVersion){
      $community2019Path = "$Env:ProgramFiles (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
      $agent2017Path = "$Env:programfiles (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin\msbuild.exe"
      $dev2017Path = "$Env:programfiles (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\msbuild.exe"
      $pro2017Path = "$Env:programfiles (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\msbuild.exe"
      $community2017Path = "$Env:programfiles (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\msbuild.exe"
      $fallback2015Path = "${Env:ProgramFiles(x86)}\MSBuild\14.0\Bin\MSBuild.exe"
      $fallback2013Path = "${Env:ProgramFiles(x86)}\MSBuild\12.0\Bin\MSBuild.exe"
      If ((16 -le $MSBuildVersion) -And (Test-Path $community2019Path)) { return $community2019Path }
      If ((15 -le $MSBuildVersion) -And (Test-Path $agent2017Path)) { return $agent2017Path} 
      If ((15 -le $MSBuildVersion) -And (Test-Path $dev2017Path)) { return $dev2017Path } 
      If ((15 -le $MSBuildVersion) -And (Test-Path $pro2017Path)) { return $pro2017Path } 
      If ((15 -le $MSBuildVersion) -And (Test-Path $community2017Path)) { return $community2017Path }
      If ((14 -le $MSBuildVersion) -And (Test-Path $fallback2015Path)) { return $fallback2015Path } 
      If ((12 -le $MSBuildVersion) -And (Test-Path $fallback2013Path)) { return $fallback2013Path } 
      return 0
    }
    $MSBuild = (Check-MSBuild -MSBuildVersion (VisualStudio-Solution -Solution '{{ check_sln_file.files[0].path }}'))
    $VS_Version = (VisualStudio-Solution -Solution '{{ check_sln_file.files[0].path }}')
    write-host $MSBuild
    write-host $VS_Version
  register: BuildTools_exists
  failed_when: BuildTools_exists.stderr | length > 0