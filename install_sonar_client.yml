---
- name: Install Sonar Scanner requirements on windows OS
  hosts: windows
  gather_facts: no
  become: yes
  become_user: Administrateur
  vars:
    #msbuild_major_Version: 15
    msbuild_dir_tmp: "C:\\temp\\msbuild_tmp\\"
    msbuild_dir_src: "/home/abdelkrim/msbuild/"
    framework_Version_user: "4.8" #or "4.7.2"
    framework_Version: "{{ framework_Version_user.split('.') | join() | int }}"
    framework_dir_tmp: "C:\\temp\\framework_tmp\\"
    framework_dir_src: "/home/abdelkrim/framework" 
    msbuild_layout: "C:\\temp\\layout"
    msbuild_lang: "fr-FR"
    Framework_devpack_version: "4.7.2"
    msbuild_workload: ["Microsoft.VisualStudio.Workload.MSBuildTools", "Microsoft.Net.Component.{{ Framework_devpack_version }}.TargetingPack"]
    openjdk_dir_src: "/home/abdelkrim"
    openjdk_dir_tmp: "C:\\temp\\openjdk_tmp\\"
    openjdk_major_Version: 11
    openjdk_app_dir: "C:\\Program Files\\java\\"
    sonarscanner_version_user: "4.7" #or "4.6"
    sonarscanner_version: "{{ sonarscanner_version_user.split('.') | join() }}"
    sonarscanner_dir_tmp: "C:\\temp\\sonarscanner_tmp\\"
    sonarscanner_dir_src: "/home/abdelkrim/sonarscanner/{{ sonarscanner_version}}"
    sonarscanner_app_dir: "C:\\Program Files\\sonar-scanner-{{ sonarscanner_version}}\\bin"
    #sonar_host_url: "http://localhost:9000"
    #sonar_login: "sonarclientlogin"
    #sonar_password: "sonarclientpasswd"
    run_action : "All_Step" #'All_Step', 'Begin_Step' , 'Build_Step', 'End_Step'
    Project_Key: "Project_test_key" 
    Solution_Folder: "C:\\temp\\convert_pdf_to_docx\\C#"
    Token_Sonar_Server: 4dc82abaef595711665e317d53e830544bf290c9
    Url_Sonar_Server: "http://localhost:9000"
    Project_Name: "{{ Project_Key}}"
    Project_Version: "1.0"
    #TrustKeystore_file: "{{ openjdk_app_dir }}TrustKeystore_PKI-EDF_SHA256\\TrustKeystore"
    #sonar_scanner_opts: "-Djavax.net.ssl.trustStore={{ TrustKeystore_file }}" #space between options



  tasks:
    - name: Check the .Net Framework version (Should be superior to v 4.6.2)
      win_shell: |
        $isSuperior = $false
        $netVersion = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" -Name Release -ErrorAction Ignore
        if (($netVersion.Release -ne $null) -and ($netVersion.Release -gt 394802)) { $isSuperior = $true }
        write-Output $isSuperior
      register: check_Framework_version

    - name: Install .NET framework v{{ framework_Version_user }}
      include_tasks: ./install_framework.yml
      register: framework_installed
      when: check_Framework_version.stdout_lines[0] == "False"

    - name: check Java version
      win_shell: |
        $jMVersion = 0
        if (Test-Path "$env:JAVA_HOME\\bin"){
          $jMVersion = (Get-Command "$env:JAVA_HOME\\bin\\java.exe" -ErrorAction Ignore |Select-Object -ExpandProperty version).Major
        }
        write-Output $jMVersion
      register: check_java_version

    - name: Install openjdk v{{ openjdk_major_Version }}
      include_tasks: ./install_openjdk_sonar.yml
      register: openjdk_installed
      when: check_java_version.stdout_lines[0] | int < openjdk_major_Version

    - name: Check if SonarScanner{{ sonarscanner_version }} already installed
      win_stat:
        path: "{{sonarscanner_app_dir}}\\SonarQube.Analysis.xml"
      register: SonarScanner_already_installed

    - name: Install SonarScanner for MSBuild v{{ sonarscanner_version }}
      include_tasks: ./install_sonarscanner.yml
      when: not SonarScanner_already_installed.stat.exists

    - name: Restarting "{{inventory_hostname}}" server in progress ...
      win_reboot:
        test_command: whoami
        reboot_timeout: 300
        msg: Reboot initiated by Ansible
      when: openjdk_installed.changed or framework_installed.changed
    
    - name: Check & install the MSBuildTools version that matches the VS version
      include_tasks: ./install_msbuild.yml